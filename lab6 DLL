#include <iostream>
#include <string>
using namespace std;

struct Node {
	string name = "";
	int weight = 0;
	int height = 0;
	Node *next;
	Node *prev;
};

class List {
private:
	Node *head;
public:
	List();
	~List();
	bool isEmpty();
	void insert(Node data);
	void deleteList(string);
	void insertafter(int, string, int, int);
	void forward();
	void backward();
	void search(string);
	void findNth(int);
	int listLength();
};

List::List() {
	head = 0;
}

List:: ~List() {
	Node *p;

	while (head != 0) {
		p = head;
		head = head->next;
		delete p;
	}
}

void List::insert(Node data) {
	Node *temp = new Node();
	Node *p, *q = NULL;

	temp->name = data.name;
	temp->weight = data.weight;
	temp->height = data.height;

	if (head == 0) {
		head = temp;
	}
	else if (temp->name < head->name) {
		temp->next = head;
		head->prev = temp;
		head = temp;
	}
	else {
		p = head;
		q = head;
		while ((p != 0) && (p->name < temp->name)) {
			q = p;
			p = p->next;
		} if (p != 0) {
			temp->next = p;
			temp->prev = q;
			q->next = temp;
			p->prev = temp;
		}
		else {
			q->next = temp;
			temp->prev = q;
		}
	}
}

void List::deleteList(string key) {
	Node *p, *q;

	if (!isEmpty()) {
		if (head->name == key) {
			if (head->next != NULL) {
				p = head;
				head = head->next;
				head->prev = NULL;
				delete p;
			}
			else {
				head = NULL;
			}
		}
		else {
			p = head;
			q = head;
			while (p != 0 && p->name != key) {
				q = p;
				p = p->next;
			} if (p->next != NULL && p->name == key) {
				q->next = p->next;
				p->next->prev = q;
				delete p;
				Node *p = head;
				cout << "name   weight   height" << endl;
				cout << "-----------------------" << endl;
				while (p) {
					cout << p->name << "     " << p->weight << "     " << p->height << endl;
					p = p->next;
				}
			}
			else if (p->next == NULL && p->name == key) {
				q->next = 0;
				delete p;
				Node *p = head;
				cout << "name   weight   height" << endl;
				cout << "-----------------------" << endl;
				while (p) {
					cout << p->name << "     " << p->weight << "     " << p->height << endl;
					p = p->next;
				}
			}
			else {
				cout << key << "is not in the list " << endl;
			}
		}
		cout << endl;
	}
	else {
		cout << "List is empty" << endl;
	}
}

void List::insertafter(int Nth, string name, int weight, int height) {
	Node *p = new Node();
	p->name = name;
	p->weight = weight;
	p->height = height;

	Node *q = NULL;

	if (head == 0) {
		head = p;
	}
	else {
		if (listLength() >= Nth) {
			q = head;
			for (int i = 1; i != Nth; i++) {
				q = q->next;
			}
			p->prev = q;
			p->next = q->next;
			q->next->prev = p;
			q->next = p;
		}
	}
}



void List::forward() {
	if (!isEmpty()) {
		Node *p = head;
		cout << "name   weight   height" << endl;
		cout << "-----------------------" << endl;
		while (p != 0) {
			cout << p->name << "     " << p->weight << "     " << p->height << endl;
			p = p->next;
		}
	}
	else {
		cout << "List is empty" << endl;
	}
	cout << endl;
}


void List::backward() {
	if (!isEmpty()) {
		Node *p = head;
		while (p->next != 0) {
			p = p->next;
		}
		cout << "name   weight   height" << endl;
		cout << "-----------------------" << endl;
		while (p != 0) {
			cout << p->name << "     " << p->weight << "     " << p->height << endl;
			p = p->prev;
		}
	}
	else {
		cout << "List is empty" << endl;
	}
	cout << endl;
}

void List::search(string key) {
	if (!isEmpty()) {
		Node *p = head;
		while (p != 0 && p->name != key) {
			p = p->next;
		}
		if (p != 0) {
			cout << "Found" << endl;
		}
		else {
			cout << key << " is not in the list" << endl;
		}
	}
	else {
		cout << "List is empty" << endl;
	}
	cout << endl;
}

void List::findNth(int Nth) {
	Node *p;
	int pos = 1;

	if (!isEmpty()) {
		if (listLength() >= Nth) {
			p = head;
			while (pos != Nth) {
				p = p->next;
				pos++;
			}
			cout << p->name << "     " << p->weight << "     " << p->height << endl;
		}
		else {
			cout << "No such a line" << endl;
		}
	}
	else {
		cout << "List is empty" << endl;
	}
	cout << endl;
}

int List::listLength() {
	Node *p;
	int cnt = 0;

	if (!isEmpty()) {
		p = head;
		while (p != NULL) {
			cnt++;
			p = p->next;
		}
	}
	return cnt;
}

bool List::isEmpty() { // 리스트가 비어있으면 true를 반환하는 함수
	if (head == 0) {
		return true;
	}
	else {
		return false;
	}
}

int main() {
	int i;

	FILE *f;
	f = fopen("lab6.txt", "r");

	List l;
	Node temp;

	for (i = 0; i < 4; ++i) {
		char buffer[10];
		int n = 0;
		fscanf(f, "%s %d %d", buffer, &temp.weight,  &temp.height);
		while (buffer[n] != NULL) {
			temp.name += buffer[n];
			++n;
		}
		l.insert(temp);
		temp.name = "";
	}

	l.forward();
	l.search("lee");
	l.deleteList("lee");
	l.insertafter(2, "Park", 73, 176);
	l.findNth(2);
	l.forward();
	l.backward();
}

