#include <iostream>
#include <string>
using namespace std;

char prec[4][2] = { '*',2,'/',2,'+', 1,'-',1 }; //연산자의 우선 순위

class Node {
private:
	char data;
	int prio;
	Node *right;
	Node *left;
	Node(char value) { data = value; prio = 4; left = 0; right = 0; }
	friend class Tree;
};

class Tree {
private:
	Node *root;
public:
	Tree() { root = 0; }
	void Build(char input);
	void Operand(char data);
	void Operator(char data, int prio);
	void Traverse(int num);
	void Inorder(Node *p);
	void Postorder(Node *p);
	void Preorder(Node *p);
	int Eval(Node *p);
	int Check(int num);
	void EvalPrint();
	void Proc(Node*p, int level);
	void ProcPrint();

};

int main() {

	Tree t;
	string problem = "";


	cin >> problem;
	for (int i = 0; i < problem.length(); i++) {
		t.Build(problem[i]);
	}
	cout << "InOrder : ";
	t.Traverse(0);

	cout << "PostOrder : ";
	t.Traverse(1);

	cout << "PreOrder : ";
	t.Traverse(2);

	cout << "Evaluation : ";
	t.EvalPrint();

	cout << "Tree structure" << endl;
	t.ProcPrint();


}

void Tree::Build(char input) { //노드에 입력을 넣어주는 함수
	int i = 0;
	for (i = 0; i < 4; i++) {
		if (input == prec[i][0]) { //입력이 연산자일 때
			Operator(input, prec[i][1]); //연산자와 우선순위를 Operator 함수에 넣어준다.
			return;
		}
	}
	Operand(input); //입력이 숫자일 피연산자일 때 operand 함수에 넣어준다.

}

void Tree::Operand(char data) { //입력이 피연산자일 때
	Node *temp = new Node(data);
	if (root == NULL) { //트리가 비어있을 때
		root = temp; 
	}
	else { //트리가 비어있지 않을 때
		Node *p = root; 
		while (p->right != NULL) { //p->right가 비어 있을 때까지
			p = p->right; 
		}
		p->right = temp; //p->right에 새 노드를 링크한다.
	}
}

void Tree::Operator(char data, int prio) { //입력이 연산자일 때
	Node *temp = new Node(data);
	temp->prio = prio; // 새 노드에 입력받은 우선순위를 넣어준다.
	 //root의 우선순위와 새 노드의 우선순위를 비교한다.
	if (root->prio >= temp->prio) { //root의 우선순위가 더 클 때
		temp->left = root; //temp->left에 root를 넣어준다.
		root = temp; //root를 temp로 바꾼다.
	}
	else { //temp의 우선순위가 더 클 때
		temp->left = root->right; 
		root->right = temp; //root->right에 temp를 넣어준다.
	}
}

void Tree::Traverse(int num) //트리를 출력한다.
{
	Node* p = root;
	switch (num)
	{
	case 0:
		Inorder(p);
		break;
	case 1:
		Postorder(p);
		break;
	case 2:
		Preorder(p);
		break;
	}
	cout << endl;
}

void Tree::Inorder(Node *p) //LPR
{
	if (p) {
		Inorder(p->left); 
		cout << p->data << " ";
		Inorder(p->right);
	}
}
void Tree::Postorder(Node *p) //LRP
{
	if (p)
	{
		Postorder(p->left);
		Postorder(p->right);
		cout << p->data << " ";
	}
}
void Tree::Preorder(Node *p) //PLR
{
	if (p)
	{
		cout << p->data << " ";
		Preorder(p->left);
		Preorder(p->right);
	}
}

int Tree::Check(int num) { //입력이 피연산자인지 연산자인지 구별하는 함수
	for (int i = 0; i < 4; i++) {
		if (prec[i][0] == num) { 
			return 0;
		}
	}
	return 1;
}

int Tree::Eval(Node *p) { //수식을 계산하는 함수
	int value = 0;
	int left = 0;
	int right = 0;
	if (p != NULL) {
		if (Check(p->data)) { //입력이 피연산자일 때
			value = p->data - '0'; //p->data를 숫자로 변환한다.
		}
		else //입력이 연산자일 때
		{
			left = Eval(p->left); //p->left 값을 넣어준다.
			right = Eval(p->right); //p->right 값을 넣어준다.
			switch (p->data) //수식 계산
			{
			case '+':
				value = left + right;
				break;
			case '-':
				value = left - right;
				break;
			case '*':
				value = left * right;
				break;
			case '/':
				value = left / right;
				break;
			}
		}
	}
	return value;
}

void Tree::EvalPrint() //계산한 수식을 출력하는 함수
{
	Node* p = root;
	if (p)
	{
		cout << Eval(p) << endl;
	}
}

void Tree::Proc(Node *p, int level) { //트리를 출력하는 함수
	if (p) {
		Proc(p->right, level + 1); //재귀함수 이용
		for (int i = 1; i <= level - 1; i++) {
			cout << "    "; //빈공간 출력
		}
		cout << p->data; //데이터 출력
		if (p->left != 0 && p->right != 0) {
			cout << " < " << endl;
		}
		else if (p->right != 0) {
			cout << "/" << endl;
		}
		else if (p->left != 0) {
			cout << "\\" << endl;
		}
		else {
			cout << endl;
		}
		Proc(p->left, level + 1);
	}
}

void Tree::ProcPrint() { //트리를 호출하는 함수
	Node *p = root;
	if (p)
	{
		Proc(p, 1);
	}
}
