#include <iostream>
using namespace std;
#define MAX 8
#define INF 10000

int main(){
    //비용 인접 배열 cost
    int cost[MAX][MAX] = {
        {0, 10000, 10000, 10000, 10000, 10000, 10000, 10000},
        {300, 0, 10000, 10000, 10000, 10000, 10000, 10000},
        {1000, 800, 0, 10000, 10000, 10000, 10000, 10000},
        {10000, 10000, 1200, 0, 10000, 10000, 10000, 10000},
        {10000, 10000, 10000, 1500, 0, 250, 10000, 10000},
        {10000, 10000, 10000, 1000, 10000, 0, 900, 1400},
        {10000, 10000, 10000, 10000, 10000, 10000, 0, 1000},
        {1700, 10000, 10000, 10000, 10000, 10000, 10000, 0}
    };

    //배열을 출력한다.
    cout <<"1) Cost Matrix"<<endl;
    for (int i=0; i<MAX; i++) {
        for (int j=0; j<MAX; j++) {
            cout << cost[i][j]<<"\t";
        }
        cout <<endl;
    }

    //최소 거리를 출력하는 함수를 실행한다.
    cout <<"\n2) Shortest path distance"<<endl;
    Shortestpath(cost, 4);
    return 0;
}

int choose(int dist[], int found[]) {
    // 최소값을 초기화한다.
    int i, min=INF, minnode;

    for (i=0; i<MAX; i++) {
        //방문하지 않았고 최소 거리라면
        if (dist[i] <= min && !found[i]) { 
            if (dist[i] != min) {
                min = dist[i];
                minnode = i;
            }
        }
    }
    //정점을 반환한다.
    return minnode;
}

void Shortestpath(int cost[MAX][MAX], int v) {
    //거리 배열
    int dist[MAX];
    //방문 여부 배열
    int found[MAX];

    //방문 여부를 false로 초기화하고 거리를 초기화한다.
    for (int i = 0; i < MAX; i++) {
        found[i] = false;
        dist[i] = INF;
    }

    //시작 정점의 거리는 항상 0이다.
    dist[v] = 0;

    //dist의 값을 최단 거리로 바꾸는 알고리즘
    for (int i = 0; i < MAX-1; i++) {
        //아직 방문하지 않은 정점 중 최소 거리인 정점을 u에 저장한다.
        int u = choose(dist, found);

		if (i > 0) {
			cout << "\nSelect: (" << u << ") dist: ";
		}
		else {
			cout <<"Beginning Dist:\t";
		}

        //u의 방문 여부를 true로 바꿔준다.
        found[u] = true;

        //u의 인접 정점의 거리를 바꾼다.
        for (int w = 0; w < MAX; w++) {
            //아직 방문하지 않았고 u를 거친 w까지의 거리의 합이 dist보다 작다면 dist의 값을 바꾼다.
            if (!found[w]) {
                if (dist[u] + cost[u][w] <dist[w]) {
                    dist[w] = dist[u] + cost[u][w];
                }
            }
        }
        //dist의 값 출력
		for (int j = 0; j < MAX; ++j) {
			cout << dist[j] << " ";
			
		}    
    }
	for (int i = 0; i < MAX; ++i) {
		if (found[i] == false) {
			cout << "\nSelect: (" << i << ") dist: ";
			for (int j=0; j < MAX; ++j) {
				cout <<dist[j]<<" ";
			}
		}
	}
}
